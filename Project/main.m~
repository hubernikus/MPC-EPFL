clc;
close all;


yalmip('clear')
clear all

%% Model data

load building.mat;
load battery.mat;

% Parameters of the Building Model
A = ssM.A;
Bu = ssM.Bu;
Bd = ssM.Bd;
C = ssM.C;
Ts = ssM.timestep;

% Parameters of the Storage Model
a = ssModel.A;
b = ssModel.Bu;   

% Installation Test
yalmip('version')
sprintf('The Project files are successfully installed')


%Other parameters

%Fill in here
%plot(refDist');
%legend('Outside Temprature in ?C','Solar gains in kW','internal gains in kW')
% JZ: write comments!!!!



%% Controller Design (Setting-up MPC optimizer)

%% Section 1: tracking MPC
% MPC parameters
y_ref=[24 24 24]';         %initial conditions
umax= 15; umin=0; ymax=26; ymin=22; % constraints
R=eye(3);
Hu=[1 0 0;0 1 0; 0 0 1; -1 0 0; 0 -1 0; 0 0 -1];
hu=[umax,umax,umax,umin,umin,umin]';
Hy=[1 0 0;0 1 0; 0 0 1; -1 0 0; 0 -1 0; 0 0 -1];
hy=[ymax ymax ymax ymin ymin ymin]';

% Optimisation variables
x = sdpvar(10,N,'full');
u = sdpvar(3,N,'full');



x0=x0red; %Initial condition

% Solver options
opt = sdpsettings('verbose',1);
opt.solver = 'gurobi';

MAXITER=50;

% Define constraints and objective for MPC-controller
con = [];
obj = 0;

obj = obj + (y-y_ref)'*R*(y-y_ref) % Cost function
con = [x(:,1) == x0];
con = [con, x(:,2) == A*x(:,1) + Bu*u(:,1)+Bd*d(:,2)]; % System dynamics
con = [con, y(:,1) == C*x(:,1)];
for j = 2:N-1  
    obj = obj + (y-y_ref)'*R*(y-y_ref) % Cost function
    con = [con, x(:,j+1) == A*x(:,j) + Bu*u(:,j)+Bd*d(:,j+1)]; % System dynamics
    con = [con, y(:,j) == C*x(:,j)];
    con = [con, Hu*u(:,j) <= hu];% Input constraints
    con = [con, Hy*y(:,j) <= hy];% Output constraints
end


ops = sdpsettings
controller = optimizer(constraints,objective,ops,[x0;d(:)],u);
[xt, yt, ut, t] = simBuild(controller, MAXITER, @shiftPred, N, 1);


%% Section 2: economic MPC and soft constraints

%fill in here

%% Section 3: economic, soft constraints, and variable cost

%fill in here

%% Section 4 : Night setbacks

%fill in here

%% Section 5 : Battery coupled with the building

%fill in here